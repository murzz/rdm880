name: Continuous Integration

on: [ push ]

jobs:
  build-and-test:
    name: Build and test

    strategy:
      fail-fast: false
      matrix:
        build_type: [ Release, Debug, Asan ]
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    runs-on: ${{ matrix.os }}

    env:
      CONAN_USER_HOME: ${{ github.workspace }}/_conan-user-home

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore Conan cache
        id: cache-conan
        uses: actions/cache@v3
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: ${{ runner.os }}-${{ matrix.build_type }}-conan-${{ hashFiles('conanfile.txt') }}

      - name: Install Python and Pip
        if: steps.cache-conan.outputs.cache-hit != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Conan
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: pip3 install -r requirements.txt

      - name: Set Conan Build type
        if: steps.cache-conan.outputs.cache-hit != 'true'
        shell: bash
        run: echo "CONAN_BUILD_TYPE=$(test "${{ matrix.build_type }}" == "Asan" && echo Debug || echo ${{ matrix.build_type }})" >> $GITHUB_ENV

      - name: Install dependencies
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: conan install --install-folder ${{ env.CONAN_USER_HOME }}/_install -pr:b=default --build=missing -s build_type=${{ env.CONAN_BUILD_TYPE }} .

      - name: Configure
        run: cmake -B_build -DCMAKE_PROJECT_INCLUDE=${{ env.CONAN_USER_HOME }}/_install/conan_paths.cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DRDM_BUILD_TESTS=ON -DRDM_BUILD_EXAMPLES=ON -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: Build
        run: cmake --build _build --config ${{ matrix.build_type }}

      - name: Test
        run: ctest --output-on-failure --test-dir _build --build-config ${{ matrix.build_type }}

  lint:
    name: Lint

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.0.0

      - name: Lint Markdown files
        uses: actionshub/markdownlint@2.0.2

  static_analysis:
    name: Static analysis

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run static analysis
        uses: JacobDomagala/StaticAnalysis@v0.0.5
        with:
          apt_pckgs: cmake g++ git libboost-all-dev ninja-build
          cmake_args: -DRDM_BUILD_TESTS=ON -DRDM_BUILD_EXAMPLES=ON -DCMAKE_VERBOSE_MAKEFILE=ON
          cppcheck_args: --enable=all --inline-suppr --suppress=missingIncludeSystem --library=boost --std=c++11 --inconclusive
